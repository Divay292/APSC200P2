function [allData, scenario, sensors] = new_and_improved()
%Demostration1 - Returns sensor detections
%    allData = Demostration1 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = Demostration1 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.9 (R2020b) and Automated Driving Toolbox 3.2 (R2020b).
% Generated on: 05-Apr-2021 14:45:11

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {});
running = true;


scenario.StopTime = 500;
[textField, hTopViewAxes] = plotScenario(scenario,egoVehicle);

objectArray = [];
delta = 8;


while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        maxLaneDetectionRange = min(500,sensor.MaxRange);
        lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}); %#ok<AGROW>
    end
    
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime)
        objects = objectDetections;
        %[U, I] = unique(objects, 'first');
       %x = 1:length(objects);
        %x(I) = [];
        objectStruct = [objects{:}];
        allPosInertial = vehicle2Inertial(objects, egoVehicle);
        disp('Class ids: %i\n')
        disp([objectStruct.ObjectClassID])
        
        plot3(allPosInertial(1,:), allPosInertial(2,:),allPosInertial(3,:),'b.', 'Parent', hTopViewAxes);
        
        message = sprintf('Number of objects sampled in one time step: %i\n', length(objects));
        textField.String = message;
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [2 0], ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [1.1 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [1.1 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{5} = radarDetectionGenerator('SensorIndex', 5, ...
    'SensorLocation', [0 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{6} = radarDetectionGenerator('SensorIndex', 6, ...
    'SensorLocation', [0 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{7} = lidarPointCloudGenerator('SensorIndex', 7, ...
    'SensorLocation', [0.2 0], ...
    'EgoVehicleActorID', 55, ...
    'ActorProfiles', profiles);
numSensors = 7;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [201.6 -199.2 0;
    199.7 -42.7 0;
    172.7 -9.3 0;
    -30.5 -7 0;
    -51 -39.7 0;
    -52.1 -245.9 0;
    -33.1 -268.3 0;
    179.5 -270.6 0;
    200.8 -246.3 0;
    201.6 -199.2 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [202.7 -199.2 0;
    136.6 -193.9 0;
    106 -63.5 0];
road(scenario, roadCenters, 'Name', 'Road1');

roadCenters = [60 35.2 0;
    68.1 -307.1 0];
road(scenario, roadCenters, 'Name', 'Road2');

roadCenters = [-80.1 -179.9 0;
    63.3 -163.2 0;
    169.9 -278 0];
road(scenario, roadCenters, 'Name', 'Road3');

roadCenters = [105.2 -67.7 0;
    129.1 -42.8 0;
    165.3 -77.4 0;
    170.5 -141.4 0;
    136.6 -193.5 0];
road(scenario, roadCenters, 'Name', 'Road4');

roadCenters = [-51 -39.2 0;
    40.9 -39.7 0];
road(scenario, roadCenters, 'Name', 'Road5');

roadCenters = [40.9 -38.7 0;
    39.4 -126.9 0];
road(scenario, roadCenters, 'Name', 'Road6');

roadCenters = [38.8 -126.4 0;
    -38.4 -127.4 0];
road(scenario, roadCenters, 'Name', 'Road7');

roadCenters = [-39 -127.4 0;
    -35.8 -39.7 0];
road(scenario, roadCenters, 'Name', 'Road8');

roadCenters = [3.1 -41.4 0;
    0.7 -126.4 0];
road(scenario, roadCenters, 'Name', 'Road9');

roadCenters = [1.8 -81.9 0;
    21.9 -82.7 0];
road(scenario, roadCenters, 'Name', 'Road10');

roadCenters = [21.7 -82.4 0;
    21.9 -54.1 0];
road(scenario, roadCenters, 'Name', 'Road11');

roadCenters = [21.9 -81.9 0;
    21.1 -110 0];
road(scenario, roadCenters, 'Name', 'Road12');

roadCenters = [1 -81.6 0;
    -20.7 -80.9 0];
road(scenario, roadCenters, 'Name', 'Road13');

roadCenters = [-20.7 -80.1 0;
    -20.5 -53.8 0];
road(scenario, roadCenters, 'Name', 'Road14');

roadCenters = [-20.5 -80.3 0;
    -21.5 -110.3 0];
road(scenario, roadCenters, 'Name', 'Road15');

% Add the actors
actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [157.9 -86.1 0], ...
    'Yaw', 15, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [162.7 -105.7 0], ...
    'Yaw', 11, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House1');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [163.7 -126 0], ...
    'Yaw', -7, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House2');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [159.6 -144.5 0], ...
    'Yaw', -18, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House3');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [150.5 -161.5 0], ...
    'Yaw', -36, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House4');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [152.5 -69.9 0], ...
    'Yaw', 21, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House5');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [141.7 -55.3 0], ...
    'Yaw', 48, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House6');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [119.4 -61.2 0], ...
    'Yaw', 144, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House7');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [110.6 -78.6 0], ...
    'Yaw', 164, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House8');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [108.6 -99.3 0], ...
    'Yaw', 175, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House9');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [108.2 -120.6 0], ...
    'Yaw', 179, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House10');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [110.6 -140.9 0], ...
    'Yaw', -167, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House11');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [119 -164.4 0], ...
    'Yaw', -150, ...
    'PlotColor', [255 0 0] / 255, ...
    'Name', 'House12');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [131 -178.4 0], ...
    'Yaw', -132, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House13');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [178.8 -191.4 0], ...
    'Yaw', -86, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House14');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [181.7 -210.7 0], ...
    'Yaw', 93, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House15');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [156.5 -210.3 0], ...
    'Yaw', 82, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House16');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [182.6 -114.7 0], ...
    'Yaw', -174, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House17');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [180.4 -137.7 0], ...
    'Yaw', 166, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House18');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [170.9 -160.8 0], ...
    'Yaw', 153, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House19');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [178.8 -91.2 0], ...
    'Yaw', -166, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House20');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [173.5 -73 0], ...
    'Yaw', -157, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House21');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [165.1 -52.4 0], ...
    'Yaw', -148, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House22');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [124.8 -33.9 0], ...
    'Yaw', -76, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House23');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [98 -62.8 0], ...
    'Yaw', -17, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House24');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [90.7 -97.9 0], ...
    'Yaw', -3, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House25');

actor(scenario, ...
    'ClassID', 6, ...
    'Length', 12, ...
    'Width', 10, ...
    'Height', 6, ...
    'Position', [90.1 -134.4 0], ...
    'Yaw', -1, ...
    'PlotColor', [255 255 17] / 255, ...
    'Name', 'House26');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [82.2 -212.6 0], ...
    'Yaw', -178, ...
    'Name', 'Apartments');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [82.8 -243.8 0], ...
    'Yaw', -178, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments1');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [83.2 -277.8 0], ...
    'Yaw', -178, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments2');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [49.9 -212 0], ...
    'Yaw', 2, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments3');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [50.9 -243.8 0], ...
    'Yaw', 1, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments4');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [51 -277.8 0], ...
    'Yaw', 2, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments5');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [130.8 -242.3 0], ...
    'Yaw', 33, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments6');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [25.3 -172.9 0], ...
    'Yaw', 87, ...
    'Name', 'Apartments7');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [-29.1 -180.8 0], ...
    'Yaw', 107, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments8');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 25, ...
    'Width', 20, ...
    'Height', 30, ...
    'Position', [-19.5 -258.4 0], ...
    'Yaw', -132, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Apartments9');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [27.6 -31.5 0], ...
    'Yaw', -91, ...
    'Name', 'Commercial');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [10.6 -31.3 0], ...
    'Yaw', -91, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Commercial1');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [-8 -30.9 0], ...
    'Yaw', -91, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Commercial2');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [48.9 -56.7 0], ...
    'Yaw', -177, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Commercial3');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [48.7 -78.2 0], ...
    'Yaw', -180, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Commercial4');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [48.2 -100.2 0], ...
    'Yaw', 178, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Commercial5');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [46.9 -119.3 0], ...
    'Yaw', 180, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Commercial6');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [17.1 -135.4 0], ...
    'Yaw', 89, ...
    'Name', 'Commercial7');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 10, ...
    'Width', 8, ...
    'Height', 5, ...
    'Position', [-12 -135.5 0], ...
    'Yaw', 89, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Commercial8');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [15.3 -57.3 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [15.3 -60.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car1');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [15.3 -63.7 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car2');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [15.2 -67 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car3');

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [53.7 37.1 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [53.7 37.1 0;
    90.3 34.1 0;
    139.7 17.1 0;
    180.8 -16.2 0;
    205.7 -53.8 0;
    212.3 -94.8 0;
    202.4 -169 0;
    203.5 -225 0;
    199.6 -251 0;
    155.3 -286.5 0;
    99.3 -306.4 0;
    28.4 -303.1 0;
    -32.5 -270.4 0;
    -66.8 -220.5 0;
    -77.9 -187.3 0;
    -80.7 -144.1 0;
    -70.7 -82.1 0;
    -50.2 -36.1 0;
    -31.5 -7.4 0;
    -17.9 3.6 0;
    -12.6 10.7 0;
    -4.2 14.3 0;
    -4.2 14.9 0;
    4.4 21.7 0;
    21.8 28.1 0;
    54.5 38.7 0];
speed = 30;
trajectory(truck, waypoints, speed);

car4 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [60.8 28.9 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car4');
waypoints = [60.8 28.9 0;
    61.8 -24.1 0;
    64.6 -145.9 0;
    65.6 -192.8 0;
    69.2 -308 0];
speed = [30;30;30;30;30];
trajectory(car4, waypoints, speed);

car5 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [168.3 -272.6 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car5');
waypoints = [168.3 -272.6 0;
    145.62 -232.8 0.01;
    112.4 -192.7 0;
    75.7 -166.6 0;
    40.3 -156.3 0;
    -3.3 -156.8 0;
    -69.6 -176.8 0;
    -74.6 -177.8 0;
    -77.8 -173.1 0;
    -79.3 -155.2 0;
    -77.6 -130.7 0;
    -71.2 -91.9 0;
    -61 -63.3 0;
    -53.9 -47.1 0;
    -49.2 -39.7 0;
    -35.9 -39 0;
    5.1 -39.7 0;
    36 -39.7 0;
    40.4 -42.6 0;
    40.6 -64.6 0;
    39.2 -97.3 0;
    39 -116.8 0;
    39.1 -122.3 0;
    37.7 -125.8 0;
    34.4 -127.6 0;
    24.7 -127.6 0;
    7.8 -128 0;
    -13.8 -127 0;
    -27.9 -127.2 0;
    -37.2 -125.4 0;
    -39.8 -121.2 0;
    -37.7 -90.1 0;
    -36.8 -47 0;
    -36.1 -39.4 0;
    -39.9 -39.5 0;
    -47.5 -38.6 0;
    -47.7 -34.5 0;
    -42 -24.1 0;
    -36 -15.2 0;
    -28.98 -6.69 0.01;
    -24.42 -0.8 0.01;
    -17.86 4.86 0.01;
    -5 14.4 0;
    4.8 21.9 0;
    12.9 24.2 0;
    20.48 27.87 0.01;
    30.72 30.85 0.01;
    45.7 33.2 0;
    54.7 34.3 0;
    65.5 34.6 0;
    78.6 33.9 0;
    83.9 32.8 0;
    92.48 30.66 0.01;
    112.9 26.9 0;
    141.4 13.1 0;
    165.2 -4.1 0;
    185.6 -24.2 0;
    208.5 -66.7 0;
    209.4 -108.4 0;
    204 -139.1 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(car5, waypoints, speed);

vehicle(scenario, ...
    'ClassID', 10, ...
    'Height', 0.1, ...
    'Position', [68.3 -140.3 0], ...
    'PlotColor', [255 0 0] / 255, ...
    'Name', 'ERV hub');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 11, ...
    'Length', 3, ...
    'Position', [70.96748105166 -140.403887624351 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'ERV');
waypoints = [71.7674810516599 -140.403887624352 0;
    67.17 -140.23 0.01;
    64.8 -140.64 0.01;
    63.86 -145.69 0.01;
    63.8 -148.14 0.01;
    64.39 -152.73 0.01;
    64.46 -160.2 0.01;
    64.06 -163.21 0.01;
    67.18 -165.29 0.01;
    73.25 -167.93 0.01;
    77.31 -169.49 0.01;
    82.34 -172.79 0.01;
    86.22 -174.9 0.01;
    90.21 -177.39 0.01;
    95.57 -180.9 0.01;
    101.75 -185.57 0.01;
    107.93 -190.81 0.01;
    114.95 -198.22 0.01;
    120.93 -203.67 0.01;
    129 -213.4 0;
    142.1 -231.6 0;
    143.7 -233.7 0;
    143.84 -233.91 0;
    158.8 -257.3 0;
    167.8 -273.7 0;
    170.6 -278.2 0;
    173 -278.8 0;
    174.6 -277.3 0;
    179.2 -274.5 0;
    185.31 -269.03 0.01;
    189.14 -265.66 0.01;
    194.53 -259.67 0.01;
    198.95 -253.65 0.01;
    201.35 -249.42 0.01;
    204.6 -241.1 0;
    205.56 -233.54 0.01;
    206.4 -220.9 0;
    205 -205.2 0;
    203.3 -199.1 0;
    192.3 -199.4 0;
    170.3 -202 0;
    148.5 -198.7 0;
    137.39 -193.87 0.01;
    123.04 -183.27 0.01;
    118.33 -177.5 0.01;
    111.88 -168.04 0.01;
    110.76 -165.8 0.01;
    110.88 -164.43 0.01;
    111.78 -165.35 0.01;
    113.51 -168.85 0.01;
    120.76 -179.45 0.01;
    127.36 -187.22 0.01;
    134.46 -192.31 0.01;
    138.46 -194.62 0.01;
    148.3 -198.6 0;
    170.2 -200.7 0;
    178.6 -200.2 0;
    184.9 -200.2 0;
    195.1 -199.4 0;
    198.44 -198.99 0.01;
    200.93 -200.84 0.01;
    201.52 -205.6 0.01;
    202.7 -216.21 0.01;
    203.29 -226.28 0.01;
    202.66 -237.26 0.01;
    200.15 -245.74 0.01;
    197.88 -251.32 0.01;
    189.44 -260.44 0.01;
    181.05 -268.72 0.01;
    173.59 -274.12 0.01;
    170.85 -276.19 0.01;
    167.23 -273.9 0.01;
    165.38 -270.42 0.01;
    158.41 -257.62 0.01;
    145.78 -237.27 0.01;
    140.9 -229.7 0;
    129.21 -213.92 0.01;
    120.21 -203.95 0.01;
    114.89 -198.37 0.01;
    107.4 -191 0;
    101.5 -185.5 0;
    95.46 -180.93 0.01;
    90.18 -177.35 0.01;
    82.33 -172.79 0.01;
    72.96 -167.88 0.01;
    67.07 -165.55 0.01;
    64.06 -163.5 0.01;
    64.69 -159.31 0.01;
    64.62 -154.27 0;
    64.25 -151.62 0.01;
    63.71 -143.49 0.01;
    64.58 -140.69 0.01;
    67.08 -140.26 0.01;
    71.09 -140.39 0];
speed = [50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;0;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;5;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

actor(scenario, ...
    'ClassID', 12, ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 10, ...
    'Position', [40.1 -314.6 0], ...
    'Yaw', 80, ...
    'Name', 'Fire Station');

truck1 = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [47.4 -315.7 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck1');
waypoints = [47.4 -315.7 0;
    49.9 -307.6 0;
    60.8 -308.8 0;
    85.6 -309.6 0;
    107.1 -306.5 0;
    150.4 -292.3 0;
    179 -273 0;
    193.7 -259.7 0;
    203.7 -244.8 0;
    205.7 -223.5 0;
    203.9 -209.2 0;
    200.5 -200.4 0;
    183 -201.2 0;
    160 -200.8 0;
    139.8 -195.3 0;
    125 -187.8 0;
    114.7 -177.5 0;
    110.01 -169.84 0.01;
    104.76 -159.64 0.01];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;0];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(truck1, waypoints, speed, waittime);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
else
    output = 'Objects only';
end

